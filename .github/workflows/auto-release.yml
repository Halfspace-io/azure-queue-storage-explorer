name: Auto Release on Merge

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Compile TypeScript
      run: pnpm run compile
      
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Get latest release version
      id: latest-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # First, let's see all releases to debug
        echo "Checking for existing releases..."
        gh release list --limit 5 || echo "No releases found or error occurred"
        
        # Get the latest release, handling empty results properly
        LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
        
        echo "Raw latest release result: '$LATEST_RELEASE'"
        
        # Check if we got a valid release or if the result is empty/null
        if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
          LATEST_RELEASE="v0.0.0"
          echo "No previous releases found, using v0.0.0 as baseline"
        else
          echo "Found latest release: $LATEST_RELEASE"
        fi
        
        echo "latest-release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        echo "Latest release: $LATEST_RELEASE"
        
    - name: Validate version
      id: validate-version
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        LATEST_RELEASE="${{ steps.latest-release.outputs.latest-release }}"
        
        echo "Debug: Current version from package.json: '$CURRENT_VERSION'"
        echo "Debug: Latest release from GitHub: '$LATEST_RELEASE'"
        
        # Remove 'v' prefix for comparison
        CURRENT_NUM=${CURRENT_VERSION#v}
        LATEST_NUM=${LATEST_RELEASE#v}
        
        echo "Debug: Current number: '$CURRENT_NUM'"
        echo "Debug: Latest number: '$LATEST_NUM'"
        echo "Comparing: $CURRENT_NUM vs $LATEST_NUM"
        
        # Simple version comparison using sort
        if [ "$CURRENT_NUM" = "$LATEST_NUM" ]; then
          echo "❌ Version $CURRENT_VERSION is the same as $LATEST_RELEASE"
          echo "This means a release with this version already exists."
          echo "Please bump the version in package.json before merging to main"
          exit 1
        fi
        
        # Check if current version is greater using sort
        HIGHER_VERSION=$(echo -e "$CURRENT_NUM\n$LATEST_NUM" | sort -V | tail -n1)
        if [ "$HIGHER_VERSION" != "$CURRENT_NUM" ]; then
          echo "❌ Version $CURRENT_VERSION is not greater than $LATEST_RELEASE"
          echo "Please bump the version in package.json before merging to main"
          exit 1
        fi
        
        echo "✅ Version $CURRENT_VERSION is valid"
        echo "version-valid=true" >> $GITHUB_OUTPUT
        
    - name: Update changelog
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        DATE=$(date +'%Y-%m-%d')
        
        # Create changelog entry if it doesn't exist
        if ! grep -q "## \[$CURRENT_VERSION\]" CHANGELOG.md; then
          sed -i "1i\\\n## [$CURRENT_VERSION] - $DATE\n\n### Added\n- Auto-generated release\n\n" CHANGELOG.md
        fi
        
    - name: Create release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        CHANGELOG_ENTRY=$(awk "/## \[$CURRENT_VERSION\]/,/## \[/" CHANGELOG.md | head -n -1)
        
        gh release create "v$CURRENT_VERSION" \
          --title "Release v$CURRENT_VERSION" \
          --notes "$CHANGELOG_ENTRY" \
          --generate-notes
          
    - name: Upload release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        
        # Install vsce
        npm install -g @vscode/vsce
        
        # Package extension
        vsce package --out release-assets/
        
        # Upload all .vsix files
        for file in release-assets/*.vsix; do
          if [ -f "$file" ]; then
            gh release upload "v$CURRENT_VERSION" "$file"
          fi
        done
