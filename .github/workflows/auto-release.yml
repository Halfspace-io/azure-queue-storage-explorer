name: Create New Github Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
  release:
    needs: get-version
    name: Release v${{ needs.get-version.outputs.version }} to GitHub Releases
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION="${{ needs.get-version.outputs.version }}"
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        echo "::notice title=Releasing Version::Releasing version v$CURRENT_VERSION to GitHub Releases"
        
    - name: Update changelog
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        DATE=$(date +'%Y-%m-%d')
        
        # Create changelog entry if it doesn't exist
        if ! grep -q "## \[$CURRENT_VERSION\]" CHANGELOG.md; then
          sed -i "1i\\\n## [$CURRENT_VERSION] - $DATE\n\n### Added\n- Auto-generated release\n\n" CHANGELOG.md
        fi
        
    - name: Create release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        CHANGELOG_ENTRY=$(awk "/## \[$CURRENT_VERSION\]/,/## \[/" CHANGELOG.md | head -n -1)
        
        gh release create "v$CURRENT_VERSION" \
          --title "Release v$CURRENT_VERSION" \
          --notes "$CHANGELOG_ENTRY" \
          --generate-notes
          
    - name: Upload release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        
        # Install vsce
        pnpm add -g @vscode/vsce
        
        # Package extension
        vsce package --no-dependencies
        
        # Upload all .vsix files
        for file in *.vsix; do
          if [ -f "$file" ]; then
            gh release upload "v$CURRENT_VERSION" "$file"
          fi
        done
