name: Continuous Deployment (CD)

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  cd:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Lint code
      run: pnpm run lint
      
    - name: Run tests with Azurite
      uses: ./.github/actions/test-with-azurite
      with:
        node-version: '20'
        pnpm-version: 'latest'
        azurite-version: 'latest'
      
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Get latest release version
      id: latest-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
        if [ -z "$LATEST_RELEASE" ]; then
          LATEST_RELEASE="v0.0.0"
        fi
        echo "latest-release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        echo "Latest release: $LATEST_RELEASE"
        
    - name: Validate version
      id: validate-version
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        LATEST_RELEASE="${{ steps.latest-release.outputs.latest-release }}"
        
        # Remove 'v' prefix for comparison
        CURRENT_NUM=${CURRENT_VERSION#v}
        LATEST_NUM=${LATEST_RELEASE#v}
        
        echo "Comparing: $CURRENT_NUM vs $LATEST_NUM"
        
        # Simple version comparison using sort
        if [ "$CURRENT_NUM" = "$LATEST_NUM" ]; then
          echo "❌ Version $CURRENT_VERSION is the same as $LATEST_RELEASE"
          echo "Please bump the version in package.json before merging to main"
          exit 1
        fi
        
        # Check if current version is greater using sort
        HIGHER_VERSION=$(echo -e "$CURRENT_NUM\n$LATEST_NUM" | sort -V | tail -n1)
        if [ "$HIGHER_VERSION" != "$CURRENT_NUM" ]; then
          echo "❌ Version $CURRENT_VERSION is not greater than $LATEST_RELEASE"
          echo "Please bump the version in package.json before merging to main"
          exit 1
        fi
        
        echo "✅ Version $CURRENT_VERSION is valid"
        echo "version-valid=true" >> $GITHUB_OUTPUT
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ steps.validate-version.outputs.version-valid }}" = "true" ]; then
          gh pr comment ${{ github.event.pull_request.number }} --body "✅ **CD Pipeline Passed**
          
          - ✅ Linting passed
          - ✅ Tests passed (with Azurite)
          - ✅ Version validation passed (${{ steps.current-version.outputs.current-version }} > ${{ steps.latest-release.outputs.latest-release }})
          
          This PR is ready for merge!"
        else
          gh pr comment ${{ github.event.pull_request.number }} --body "❌ **CD Pipeline Failed**
          
          Please check the workflow logs for details."
        fi
